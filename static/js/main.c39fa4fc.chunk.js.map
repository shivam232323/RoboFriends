{"version":3,"sources":["serviceWorker.js","Robot.js","Robotss.js","Search.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Robot","id","name","email","className","alt","src","Robotss","robots","map","value","i","key","Search","searchfield","onsearch","type","placeholder","onChange","App","search","event","setState","target","state","robot","fetch","then","response","json","users","filterrobots","this","filter","toLowerCase","includes","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCCSC,MAjBf,YAAiC,IAAjBC,EAAgB,EAAhBA,GAAGC,EAAa,EAAbA,KAAKC,EAAQ,EAARA,MACtB,OACC,yBAAKC,UAAU,UACd,yBAAKA,UAAU,8CACV,yBAAKC,IAAI,SAASC,IAAG,+BAA0BJ,EAA1B,mBACrB,4BAAKD,GACL,4BAAKC,GACL,4BAAKC,MCqBCI,MAzBf,YACE,IADiBC,EAClB,EADkBA,OAGnB,OACC,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAErB,OAAO,kBAAC,EAAD,CAAQC,IAAKD,EACnBV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KACfC,MAAOK,EAAOG,GAAGR,aCGLU,MAhBf,YACA,EADiBC,YAChB,IAD8BC,EAC/B,EAD+BA,SAG9B,OACE,yBAAKX,UAAU,UACN,wBAAIH,GAAG,QAAP,eACD,2BAAOA,GAAG,QACVe,KAAK,OACLC,YAAY,gBACZC,SAAUH,MC0CPI,G,wDA9CX,aACC,IAAD,8BACC,gBAUDC,OAAS,SAACC,GAEJ,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOb,SAV9C,EAAKc,MACL,CACCC,MAAM,GACAX,YAAY,KANpB,E,gEAkBG,IAAD,OACCY,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAC9F,EAAKR,SAAS,CAACG,MAAMK,S,+BAOtB,IAAD,OACOC,EAAaC,KAAKR,MAAMC,MAAMQ,QAAO,SAAAR,GAC1C,OAAQA,EAAMvB,KAAKgC,cAAcC,SAAS,EAAKX,MAAMV,YAAYoB,kBAKvE,OACC,yBAAK9B,UAAU,MAET,kBAAC,EAAD,CAAQW,SAAUiB,KAAKZ,SACvB,kBAAC,EAAD,CAASZ,OAAQuB,S,GAzCRK,cCElBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SLuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c39fa4fc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nfunction Robot({id,name,email}) {\r\n  return (\r\n  \t<div className=\"robots\">\r\n    <div className='ba br4 b--solid fl  grow tc bg-light-green'>\r\n         <img alt=\"robots\" src={`https://robohash.org/${name}?size=200x200`}/>\r\n         <h1>{id}</h1>\r\n         <h3>{name}</h3>\r\n         <h4>{email}</h4>   \r\n         </div>\r\n        \r\n\r\n\r\n     </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Robot;\r\n","import React from 'react';\r\nimport Robot from './Robot';\r\n\r\n\r\n\r\nfunction Robotss ({robots}) \r\n {\r\n   \r\nreturn(\r\n\t<div>\r\n\t\r\n    {robots.map((value,i)=>\r\n{\r\n  return <Robot  key={i}\r\n   id={robots[i].id} \r\n   name={robots[i].name}\r\n    email={robots[i].email}\r\n      />;\r\n\r\n}\r\n\r\n )\r\n\r\n}\r\n\r\n</div>\r\n\r\n\t);\r\n}\r\n\r\nexport default Robotss;"," import React from 'react';\r\n \r\n\r\n function Search({searchfield , onsearch})\r\n {\r\n\r\n \treturn(\r\n \t\t <div className=\"Search\">\r\n             <h1 id=\"font\">RoboFriends</h1>\r\n            <input id=\"field\"\r\n            type=\"text\" \r\n            placeholder=\"Search robots\"\r\n            onChange={onsearch}\r\n            />\r\n \t        </div>\t\r\n \t\t );\r\n }\r\n\r\n\r\n export default Search;","import React ,{Component} from 'react';\r\nimport Robotss from './Robotss';\r\nimport Search from './Search';\r\nimport './App.css'\r\n\r\n\r\nclass App extends Component  {\r\n\r\n    constructor()\r\n    {\r\n    \tsuper()\r\n\r\n    \tthis.state=\r\n    \t{\r\n    \t\trobot:[],\r\n            searchfield:' '\r\n    \t}\r\n    \t \r\n    }\r\n\r\n    search = (event) => {\r\n   \r\n          this.setState({searchfield: event.target.value});\r\n        \r\n    }\r\n\r\n      componentDidMount()\r\n      {\r\n      \tfetch('https://jsonplaceholder.typicode.com/users').then(response=> response.json()).then(users =>\r\n      \t this.setState({robot:users}));\r\n      \t\r\n      \t\r\n      }\r\n\r\n\r\n      render()\r\n      {\r\n      \tconst filterrobots=this.state.robot.filter(robot =>{\r\n      \t return  robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n     \r\n                  \r\n        })\r\n             \r\n  return (\r\n  \t<div className=\"tc\">\r\n\r\n         <Search onsearch={this.search}/>\r\n         <Robotss robots={filterrobots}/>\r\n   </div>\r\n      );\r\n}\r\n\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App.js';\n\n\nReactDOM.render(\n  <React.StrictMode>\n   <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}